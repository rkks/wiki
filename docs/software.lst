060101%Ant Vs. Make%antvsmake.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>The fundamental issue with Make and Java is that Make works on the premise that you have specify a dependency, and then a rule to resolve that dependency.</p>
060101%Bug Fixing%bugfix.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>If you can’t re-create the bug on demand, then your chances of fixing it will be nil.</p>
060101%C Coding Standard Rules -- Barr Group%codestd.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Braces – Braces ({ }) shall always surround the blocks of code (also known as compound statements) following if, else, switch, while, do, and for keywords. Single statements and empty statements following these keywords shall also always be surrounded by braces.</p>
060101%Technical Concepts%concepts.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Deep Packet Inspection</p>
060101%Seven Rules for Sound Documentation%documentation.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Documentation should be written from the point of view of the reader, not the writer.</p>
060101%5 Golden Rules of Design%goldruledesign.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Technology Serves Humans - Technology serves humans; Humans do not serve technology.</p>
060101%Golden Rules of Programming%goldruleprog.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Even best programmers make mistakes.</p>
060101%Technical How-To%howtos.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>How to write your own Network sniffer</p>
060101%Working on Large Codebase%largecode.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Step through code in debug mode to see how it works Pair up with someone more familiar with the code base than you, taking turns to be the person coding and the person watching/discussing. Rotate partners amongst team members so knowledge gets spread around. Write unit tests. Start with an assertion of how you think code will work. If it turns out as you expected, you’ve probably understood the code. If not, you’ve got a puzzle to solve and or an enquiry to make. (Thanks Donal, this is a great answer) Go through existing unit tests for functional code, in a similar fashion to above Read UML, Doxygen generated class diagrams and other documentation to get a broad feel of the code. Make small edits or bug fixes, then gradually build up Keep notes, and don’t jump in and start developing; it’s more valuable to spend time understanding than to generate messy or inappropriate code.</p>
060101%System Analysis Design Guidelines%sadguide.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>System should be asynchronous which is well guarded using state-machine(s).</p>
060101%Software Development Best Practices - Architecture%swarch.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Basic function of an architecture needs to be well understand and well stated.</p>
060101%Development Practices%swdevguide.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>Automated Systems:</p>
060101%Understanding Code%understandcode.html%January 1, 2006%Sun, 01 Jan 2006 IST%<p>For what it’s worth, I had a professional reputation (with my management) as being good at that, and I did a lot of support programming fixing other people’s code.</p>
